// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       UserRole
  contacNo   String
  address    String
  profileImg String

  @@map("users")
}

model Category {
  id    String @id @default(uuid())
  title String

  books Book[]
}

// Create a Book model with the following fields:

// id: A UUID generated using the @default(uuid()) attribute.
// title: A string representing the book's title.
// author: A string representing the book's author.
// price: A floating-point number representing the book's price.
// genre: A string representing the book's genre.
// publicationDate: A string field representing the book's publication date.
// categoryId: A UUID representing the category to which the book belongs.

model Book {
  id              String @id @default(uuid())
  title           String
  author          String
  price           Float
  genre           String
  publicationDate String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
}

// Order Model
// Create an Order model with the following fields:

// id: A UUID generated using the @default(uuid()) attribute.
// userId: A UUID representing the user who placed the order.
// orderedBooks: A JSON field containing an array of objects, each with book ID and quantity.
// status: A string with values 'pending', 'shipped', or 'delivered', defaulting to 'pending'.
// createdAt: A DateTime field representing the order creation timestamp.

model Order {
  id           String      @id @default(uuid())
  userId       String
  orderedBooks Json
  status       OrderStatus @default(pending)

  createdAt DateTime @default(now())
}

enum UserRole {
  admin
  customer
}

enum OrderStatus {
  pending
  shipped
  delivered
}
